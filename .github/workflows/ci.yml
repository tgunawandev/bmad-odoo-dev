name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'package.json'
      - 'agents/**'
      - 'tasks/**'
      - 'templates/**'
      - 'checklists/**'
      - 'data/**'
      - 'teams/**'
      - 'bin/**'
      - 'scripts/**'
      - 'config.yaml'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (leave empty to use package.json version)'
        required: false
        type: string

permissions:
  contents: write
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run tests
      run: npm test
    
    - name: Validate expansion pack structure
      run: npm run validate
    
    - name: Build distribution
      run: npm run build

  validate-bmad-compatibility:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install BMAD-METHOD core
      run: npm install bmad-method@latest
    
    - name: Install current package
      run: npm install
    
    - name: Test compatibility
      run: npx bmad-odoo validate

  publish:
    needs: [test, validate-bmad-compatibility]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        registry-url: 'https://registry.npmjs.org'

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: npm ci

    - name: Get package version
      id: package
      run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

    - name: Check if version exists on npm
      id: npm_check
      run: |
        VERSION=${{ steps.package.outputs.version }}
        if npm view bmad-odoo-dev@$VERSION version 2>/dev/null; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Version $VERSION already exists on npm"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Version $VERSION does not exist on npm"
        fi

    - name: Build package
      if: steps.npm_check.outputs.exists == 'false'
      run: npm run build

    - name: Publish to npm
      if: steps.npm_check.outputs.exists == 'false'
      run: npm publish --tag latest
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Verify @latest tag
      if: steps.npm_check.outputs.exists == 'false'
      run: |
        VERSION=${{ steps.package.outputs.version }}
        echo "Verifying @latest tag points to version $VERSION"
        LATEST_VERSION=$(npm view bmad-odoo-dev@latest version)
        if [ "$LATEST_VERSION" = "$VERSION" ]; then
          echo "‚úÖ @latest tag correctly points to $VERSION"
        else
          echo "‚ö†Ô∏è  @latest tag issue: expected $VERSION, got $LATEST_VERSION"
          echo "Manually setting @latest tag..."
          npm dist-tag add bmad-odoo-dev@$VERSION latest
        fi
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Create GitHub Release
      if: steps.npm_check.outputs.exists == 'false'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.package.outputs.version }}
        name: Release v${{ steps.package.outputs.version }}
        body: |
          ## BMAD-ODOO-DEV v${{ steps.package.outputs.version }}
          
          ### üöÄ Installation
          ```bash
          npm install bmad-odoo-dev
          npx bmad-odoo install
          ```
          
          ### ü§ñ Agents Available
          - `*odoo-analyst` - Business analysis, requirements, epic creation, and story management (Scrum Master)
          - `*odoo-architect` - System architecture, technical design, deployment strategy, and migration planning
          - `*odoo-developer` - Code implementation, module development, deployment execution, and troubleshooting
          
          ### ‚ö° Slash Commands
          - `*BMadOdooDev create-addon` - Generate new Odoo addon
          - `*BMadOdooDev enhance-existing` - Plan system enhancements
          - `*BMadOdooDev plan-migration` - Structure version upgrades
          
          ### üÜï New in v${{ steps.package.outputs.version }}
          - Hybrid knowledge base with Context7 integration
          - 50-70% reduction in token usage for documentation
          - Context7 commands: `*odoo-docs`, `*odoo-api`, `*odoo-version`
          - Enhanced BMAD-METHOD compliance with standard commands
          - Story-driven development with `*develop-story` command
          
          See [CHANGELOG.md](./CHANGELOG.md) for detailed changes.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Version already published
      if: steps.npm_check.outputs.exists == 'true'
      run: |
        echo "::notice::Version ${{ steps.package.outputs.version }} already exists on npm, skipping publish"